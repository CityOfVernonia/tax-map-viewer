import{q as p,B as u,C as d,D as c,A as h,O as S,fy as m,r as f,F as v,af as g,jc as b,ax as C,e as o,y as s,ej as w,w as G,N as x,R,a0 as _,n as j,fC as n,ap as F,an as P,f5 as k,S as $,a2 as E}from"./index.3224a022.js";const L=["atom","xml"],M={base:n,key:"type",typeMap:{"simple-line":F},errorContext:"symbol"},D={base:n,key:"type",typeMap:{"picture-marker":P,"simple-marker":k},errorContext:"symbol"},O={base:n,key:"type",typeMap:{"simple-fill":$},errorContext:"symbol"};let t=class extends p(u(d(c(h(S(E)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}readFeatureCollections(e,r){return r.featureCollection.layers.forEach(l=>{var a;const i=l.layerDefinition.drawingInfo.renderer.symbol;i&&i.type==="esriSFS"&&((a=i.outline)==null?void 0:a.style.includes("esriSFS"))&&(i.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?m(this.url,L)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const r=f(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(v).then(()=>this._fetchService(r)).then(l=>{this.read(l,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var i;const r=this.spatialReference,{data:l}=await g(C.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:b(r)?void 0:(i=r.wkid)!=null?i:JSON.stringify(r)},signal:e});return l}_hasGeometry(e){var r,l;return(l=(r=this.featureCollections)==null?void 0:r.some(i=>{var a,y;return((a=i.featureSet)==null?void 0:a.geometryType)===e&&((y=i.featureSet.features)==null?void 0:y.length)>0}))!=null?l:!1}};o([s()],t.prototype,"description",void 0),o([s()],t.prototype,"featureCollections",void 0),o([w("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),o([s({type:G,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),o([s(x)],t.prototype,"id",void 0),o([s(R)],t.prototype,"legendEnabled",void 0),o([s({types:M,json:{write:!0}})],t.prototype,"lineSymbol",void 0),o([s({type:["show","hide"]})],t.prototype,"listMode",void 0),o([s({types:D,json:{write:!0}})],t.prototype,"pointSymbol",void 0),o([s({types:O,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),o([s({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),o([s(_)],t.prototype,"url",void 0),o([s({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),o([s({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=o([j("esri.layers.GeoRSSLayer")],t);const A=t;export{A as default};
